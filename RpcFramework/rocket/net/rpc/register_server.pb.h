// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_register_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_register_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_register_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_register_5fserver_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_register_5fserver_2eproto;
class GetTargetAddrReq;
struct GetTargetAddrReqDefaultTypeInternal;
extern GetTargetAddrReqDefaultTypeInternal _GetTargetAddrReq_default_instance_;
class GetTargetAddrResp;
struct GetTargetAddrRespDefaultTypeInternal;
extern GetTargetAddrRespDefaultTypeInternal _GetTargetAddrResp_default_instance_;
class RegisterServerReq;
struct RegisterServerReqDefaultTypeInternal;
extern RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
class RegisterServerResp;
struct RegisterServerRespDefaultTypeInternal;
extern RegisterServerRespDefaultTypeInternal _RegisterServerResp_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GetTargetAddrReq* Arena::CreateMaybeMessage<::GetTargetAddrReq>(Arena*);
template<> ::GetTargetAddrResp* Arena::CreateMaybeMessage<::GetTargetAddrResp>(Arena*);
template<> ::RegisterServerReq* Arena::CreateMaybeMessage<::RegisterServerReq>(Arena*);
template<> ::RegisterServerResp* Arena::CreateMaybeMessage<::RegisterServerResp>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RegisterServerReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterServerReq) */ {
 public:
  inline RegisterServerReq() : RegisterServerReq(nullptr) {}
  ~RegisterServerReq() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerReq(const RegisterServerReq& from);
  RegisterServerReq(RegisterServerReq&& from) noexcept
    : RegisterServerReq() {
    *this = ::std::move(from);
  }

  inline RegisterServerReq& operator=(const RegisterServerReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerReq& operator=(RegisterServerReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerReq* internal_default_instance() {
    return reinterpret_cast<const RegisterServerReq*>(
               &_RegisterServerReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterServerReq& a, RegisterServerReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerReq& from) {
    RegisterServerReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterServerReq";
  }
  protected:
  explicit RegisterServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kServiceIPAndPortFieldNumber = 2,
  };
  // string ServiceName = 1;
  void clear_servicename();
  const std::string& servicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servicename();
  PROTOBUF_NODISCARD std::string* release_servicename();
  void set_allocated_servicename(std::string* servicename);
  private:
  const std::string& _internal_servicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servicename(const std::string& value);
  std::string* _internal_mutable_servicename();
  public:

  // string ServiceIPAndPort = 2;
  void clear_serviceipandport();
  const std::string& serviceipandport() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serviceipandport(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serviceipandport();
  PROTOBUF_NODISCARD std::string* release_serviceipandport();
  void set_allocated_serviceipandport(std::string* serviceipandport);
  private:
  const std::string& _internal_serviceipandport() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serviceipandport(const std::string& value);
  std::string* _internal_mutable_serviceipandport();
  public:

  // @@protoc_insertion_point(class_scope:RegisterServerReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servicename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serviceipandport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RegisterServerResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterServerResp) */ {
 public:
  inline RegisterServerResp() : RegisterServerResp(nullptr) {}
  ~RegisterServerResp() override;
  explicit PROTOBUF_CONSTEXPR RegisterServerResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterServerResp(const RegisterServerResp& from);
  RegisterServerResp(RegisterServerResp&& from) noexcept
    : RegisterServerResp() {
    *this = ::std::move(from);
  }

  inline RegisterServerResp& operator=(const RegisterServerResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterServerResp& operator=(RegisterServerResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterServerResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterServerResp* internal_default_instance() {
    return reinterpret_cast<const RegisterServerResp*>(
               &_RegisterServerResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterServerResp& a, RegisterServerResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterServerResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterServerResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterServerResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterServerResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterServerResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterServerResp& from) {
    RegisterServerResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterServerResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterServerResp";
  }
  protected:
  explicit RegisterServerResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterServerResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
    int32_t ret_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetTargetAddrReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTargetAddrReq) */ {
 public:
  inline GetTargetAddrReq() : GetTargetAddrReq(nullptr) {}
  ~GetTargetAddrReq() override;
  explicit PROTOBUF_CONSTEXPR GetTargetAddrReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTargetAddrReq(const GetTargetAddrReq& from);
  GetTargetAddrReq(GetTargetAddrReq&& from) noexcept
    : GetTargetAddrReq() {
    *this = ::std::move(from);
  }

  inline GetTargetAddrReq& operator=(const GetTargetAddrReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetAddrReq& operator=(GetTargetAddrReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTargetAddrReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTargetAddrReq* internal_default_instance() {
    return reinterpret_cast<const GetTargetAddrReq*>(
               &_GetTargetAddrReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTargetAddrReq& a, GetTargetAddrReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetAddrReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTargetAddrReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTargetAddrReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTargetAddrReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTargetAddrReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTargetAddrReq& from) {
    GetTargetAddrReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetAddrReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTargetAddrReq";
  }
  protected:
  explicit GetTargetAddrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceServiceNameFieldNumber = 1,
    kTargetServiceNameFieldNumber = 2,
  };
  // string sourceServiceName = 1;
  void clear_sourceservicename();
  const std::string& sourceservicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sourceservicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sourceservicename();
  PROTOBUF_NODISCARD std::string* release_sourceservicename();
  void set_allocated_sourceservicename(std::string* sourceservicename);
  private:
  const std::string& _internal_sourceservicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sourceservicename(const std::string& value);
  std::string* _internal_mutable_sourceservicename();
  public:

  // string targetServiceName = 2;
  void clear_targetservicename();
  const std::string& targetservicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetservicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetservicename();
  PROTOBUF_NODISCARD std::string* release_targetservicename();
  void set_allocated_targetservicename(std::string* targetservicename);
  private:
  const std::string& _internal_targetservicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetservicename(const std::string& value);
  std::string* _internal_mutable_targetservicename();
  public:

  // @@protoc_insertion_point(class_scope:GetTargetAddrReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceservicename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetservicename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GetTargetAddrResp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetTargetAddrResp) */ {
 public:
  inline GetTargetAddrResp() : GetTargetAddrResp(nullptr) {}
  ~GetTargetAddrResp() override;
  explicit PROTOBUF_CONSTEXPR GetTargetAddrResp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTargetAddrResp(const GetTargetAddrResp& from);
  GetTargetAddrResp(GetTargetAddrResp&& from) noexcept
    : GetTargetAddrResp() {
    *this = ::std::move(from);
  }

  inline GetTargetAddrResp& operator=(const GetTargetAddrResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTargetAddrResp& operator=(GetTargetAddrResp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTargetAddrResp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTargetAddrResp* internal_default_instance() {
    return reinterpret_cast<const GetTargetAddrResp*>(
               &_GetTargetAddrResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTargetAddrResp& a, GetTargetAddrResp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTargetAddrResp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTargetAddrResp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTargetAddrResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTargetAddrResp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTargetAddrResp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetTargetAddrResp& from) {
    GetTargetAddrResp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTargetAddrResp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetTargetAddrResp";
  }
  protected:
  explicit GetTargetAddrResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetServiceIPAndPortFieldNumber = 3,
    kResInfoFieldNumber = 2,
    kRetCodeFieldNumber = 1,
  };
  // repeated string targetServiceIPAndPort = 3;
  int targetserviceipandport_size() const;
  private:
  int _internal_targetserviceipandport_size() const;
  public:
  void clear_targetserviceipandport();
  const std::string& targetserviceipandport(int index) const;
  std::string* mutable_targetserviceipandport(int index);
  void set_targetserviceipandport(int index, const std::string& value);
  void set_targetserviceipandport(int index, std::string&& value);
  void set_targetserviceipandport(int index, const char* value);
  void set_targetserviceipandport(int index, const char* value, size_t size);
  std::string* add_targetserviceipandport();
  void add_targetserviceipandport(const std::string& value);
  void add_targetserviceipandport(std::string&& value);
  void add_targetserviceipandport(const char* value);
  void add_targetserviceipandport(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targetserviceipandport() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targetserviceipandport();
  private:
  const std::string& _internal_targetserviceipandport(int index) const;
  std::string* _internal_add_targetserviceipandport();
  public:

  // string res_info = 2;
  void clear_res_info();
  const std::string& res_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_info();
  PROTOBUF_NODISCARD std::string* release_res_info();
  void set_allocated_res_info(std::string* res_info);
  private:
  const std::string& _internal_res_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_info(const std::string& value);
  std::string* _internal_mutable_res_info();
  public:

  // int32 ret_code = 1;
  void clear_ret_code();
  int32_t ret_code() const;
  void set_ret_code(int32_t value);
  private:
  int32_t _internal_ret_code() const;
  void _internal_set_ret_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:GetTargetAddrResp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targetserviceipandport_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_info_;
    int32_t ret_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_register_5fserver_2eproto;
};
// ===================================================================

class Register_Stub;

class Register : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Register() {};
 public:
  virtual ~Register();

  typedef Register_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void getTargetAddr(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetTargetAddrReq* request,
                       ::GetTargetAddrResp* response,
                       ::google::protobuf::Closure* done);
  virtual void registerServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::RegisterServerReq* request,
                       ::RegisterServerResp* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Register);
};

class Register_Stub : public Register {
 public:
  Register_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  Register_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~Register_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements Register ------------------------------------------

  void getTargetAddr(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::GetTargetAddrReq* request,
                       ::GetTargetAddrResp* response,
                       ::google::protobuf::Closure* done);
  void registerServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::RegisterServerReq* request,
                       ::RegisterServerResp* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Register_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterServerReq

// string ServiceName = 1;
inline void RegisterServerReq::clear_servicename() {
  _impl_.servicename_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::servicename() const {
  // @@protoc_insertion_point(field_get:RegisterServerReq.ServiceName)
  return _internal_servicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerReq::set_servicename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.servicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterServerReq.ServiceName)
}
inline std::string* RegisterServerReq::mutable_servicename() {
  std::string* _s = _internal_mutable_servicename();
  // @@protoc_insertion_point(field_mutable:RegisterServerReq.ServiceName)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_servicename() const {
  return _impl_.servicename_.Get();
}
inline void RegisterServerReq::_internal_set_servicename(const std::string& value) {
  
  _impl_.servicename_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerReq::_internal_mutable_servicename() {
  
  return _impl_.servicename_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerReq::release_servicename() {
  // @@protoc_insertion_point(field_release:RegisterServerReq.ServiceName)
  return _impl_.servicename_.Release();
}
inline void RegisterServerReq::set_allocated_servicename(std::string* servicename) {
  if (servicename != nullptr) {
    
  } else {
    
  }
  _impl_.servicename_.SetAllocated(servicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servicename_.IsDefault()) {
    _impl_.servicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterServerReq.ServiceName)
}

// string ServiceIPAndPort = 2;
inline void RegisterServerReq::clear_serviceipandport() {
  _impl_.serviceipandport_.ClearToEmpty();
}
inline const std::string& RegisterServerReq::serviceipandport() const {
  // @@protoc_insertion_point(field_get:RegisterServerReq.ServiceIPAndPort)
  return _internal_serviceipandport();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerReq::set_serviceipandport(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serviceipandport_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterServerReq.ServiceIPAndPort)
}
inline std::string* RegisterServerReq::mutable_serviceipandport() {
  std::string* _s = _internal_mutable_serviceipandport();
  // @@protoc_insertion_point(field_mutable:RegisterServerReq.ServiceIPAndPort)
  return _s;
}
inline const std::string& RegisterServerReq::_internal_serviceipandport() const {
  return _impl_.serviceipandport_.Get();
}
inline void RegisterServerReq::_internal_set_serviceipandport(const std::string& value) {
  
  _impl_.serviceipandport_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerReq::_internal_mutable_serviceipandport() {
  
  return _impl_.serviceipandport_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerReq::release_serviceipandport() {
  // @@protoc_insertion_point(field_release:RegisterServerReq.ServiceIPAndPort)
  return _impl_.serviceipandport_.Release();
}
inline void RegisterServerReq::set_allocated_serviceipandport(std::string* serviceipandport) {
  if (serviceipandport != nullptr) {
    
  } else {
    
  }
  _impl_.serviceipandport_.SetAllocated(serviceipandport, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serviceipandport_.IsDefault()) {
    _impl_.serviceipandport_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterServerReq.ServiceIPAndPort)
}

// -------------------------------------------------------------------

// RegisterServerResp

// int32 ret_code = 1;
inline void RegisterServerResp::clear_ret_code() {
  _impl_.ret_code_ = 0;
}
inline int32_t RegisterServerResp::_internal_ret_code() const {
  return _impl_.ret_code_;
}
inline int32_t RegisterServerResp::ret_code() const {
  // @@protoc_insertion_point(field_get:RegisterServerResp.ret_code)
  return _internal_ret_code();
}
inline void RegisterServerResp::_internal_set_ret_code(int32_t value) {
  
  _impl_.ret_code_ = value;
}
inline void RegisterServerResp::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:RegisterServerResp.ret_code)
}

// string res_info = 2;
inline void RegisterServerResp::clear_res_info() {
  _impl_.res_info_.ClearToEmpty();
}
inline const std::string& RegisterServerResp::res_info() const {
  // @@protoc_insertion_point(field_get:RegisterServerResp.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterServerResp::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.res_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterServerResp.res_info)
}
inline std::string* RegisterServerResp::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:RegisterServerResp.res_info)
  return _s;
}
inline const std::string& RegisterServerResp::_internal_res_info() const {
  return _impl_.res_info_.Get();
}
inline void RegisterServerResp::_internal_set_res_info(const std::string& value) {
  
  _impl_.res_info_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterServerResp::_internal_mutable_res_info() {
  
  return _impl_.res_info_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterServerResp::release_res_info() {
  // @@protoc_insertion_point(field_release:RegisterServerResp.res_info)
  return _impl_.res_info_.Release();
}
inline void RegisterServerResp::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  _impl_.res_info_.SetAllocated(res_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.res_info_.IsDefault()) {
    _impl_.res_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterServerResp.res_info)
}

// -------------------------------------------------------------------

// GetTargetAddrReq

// string sourceServiceName = 1;
inline void GetTargetAddrReq::clear_sourceservicename() {
  _impl_.sourceservicename_.ClearToEmpty();
}
inline const std::string& GetTargetAddrReq::sourceservicename() const {
  // @@protoc_insertion_point(field_get:GetTargetAddrReq.sourceServiceName)
  return _internal_sourceservicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTargetAddrReq::set_sourceservicename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sourceservicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetTargetAddrReq.sourceServiceName)
}
inline std::string* GetTargetAddrReq::mutable_sourceservicename() {
  std::string* _s = _internal_mutable_sourceservicename();
  // @@protoc_insertion_point(field_mutable:GetTargetAddrReq.sourceServiceName)
  return _s;
}
inline const std::string& GetTargetAddrReq::_internal_sourceservicename() const {
  return _impl_.sourceservicename_.Get();
}
inline void GetTargetAddrReq::_internal_set_sourceservicename(const std::string& value) {
  
  _impl_.sourceservicename_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTargetAddrReq::_internal_mutable_sourceservicename() {
  
  return _impl_.sourceservicename_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTargetAddrReq::release_sourceservicename() {
  // @@protoc_insertion_point(field_release:GetTargetAddrReq.sourceServiceName)
  return _impl_.sourceservicename_.Release();
}
inline void GetTargetAddrReq::set_allocated_sourceservicename(std::string* sourceservicename) {
  if (sourceservicename != nullptr) {
    
  } else {
    
  }
  _impl_.sourceservicename_.SetAllocated(sourceservicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sourceservicename_.IsDefault()) {
    _impl_.sourceservicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetTargetAddrReq.sourceServiceName)
}

// string targetServiceName = 2;
inline void GetTargetAddrReq::clear_targetservicename() {
  _impl_.targetservicename_.ClearToEmpty();
}
inline const std::string& GetTargetAddrReq::targetservicename() const {
  // @@protoc_insertion_point(field_get:GetTargetAddrReq.targetServiceName)
  return _internal_targetservicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTargetAddrReq::set_targetservicename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetservicename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetTargetAddrReq.targetServiceName)
}
inline std::string* GetTargetAddrReq::mutable_targetservicename() {
  std::string* _s = _internal_mutable_targetservicename();
  // @@protoc_insertion_point(field_mutable:GetTargetAddrReq.targetServiceName)
  return _s;
}
inline const std::string& GetTargetAddrReq::_internal_targetservicename() const {
  return _impl_.targetservicename_.Get();
}
inline void GetTargetAddrReq::_internal_set_targetservicename(const std::string& value) {
  
  _impl_.targetservicename_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTargetAddrReq::_internal_mutable_targetservicename() {
  
  return _impl_.targetservicename_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTargetAddrReq::release_targetservicename() {
  // @@protoc_insertion_point(field_release:GetTargetAddrReq.targetServiceName)
  return _impl_.targetservicename_.Release();
}
inline void GetTargetAddrReq::set_allocated_targetservicename(std::string* targetservicename) {
  if (targetservicename != nullptr) {
    
  } else {
    
  }
  _impl_.targetservicename_.SetAllocated(targetservicename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetservicename_.IsDefault()) {
    _impl_.targetservicename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetTargetAddrReq.targetServiceName)
}

// -------------------------------------------------------------------

// GetTargetAddrResp

// int32 ret_code = 1;
inline void GetTargetAddrResp::clear_ret_code() {
  _impl_.ret_code_ = 0;
}
inline int32_t GetTargetAddrResp::_internal_ret_code() const {
  return _impl_.ret_code_;
}
inline int32_t GetTargetAddrResp::ret_code() const {
  // @@protoc_insertion_point(field_get:GetTargetAddrResp.ret_code)
  return _internal_ret_code();
}
inline void GetTargetAddrResp::_internal_set_ret_code(int32_t value) {
  
  _impl_.ret_code_ = value;
}
inline void GetTargetAddrResp::set_ret_code(int32_t value) {
  _internal_set_ret_code(value);
  // @@protoc_insertion_point(field_set:GetTargetAddrResp.ret_code)
}

// string res_info = 2;
inline void GetTargetAddrResp::clear_res_info() {
  _impl_.res_info_.ClearToEmpty();
}
inline const std::string& GetTargetAddrResp::res_info() const {
  // @@protoc_insertion_point(field_get:GetTargetAddrResp.res_info)
  return _internal_res_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTargetAddrResp::set_res_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.res_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:GetTargetAddrResp.res_info)
}
inline std::string* GetTargetAddrResp::mutable_res_info() {
  std::string* _s = _internal_mutable_res_info();
  // @@protoc_insertion_point(field_mutable:GetTargetAddrResp.res_info)
  return _s;
}
inline const std::string& GetTargetAddrResp::_internal_res_info() const {
  return _impl_.res_info_.Get();
}
inline void GetTargetAddrResp::_internal_set_res_info(const std::string& value) {
  
  _impl_.res_info_.Set(value, GetArenaForAllocation());
}
inline std::string* GetTargetAddrResp::_internal_mutable_res_info() {
  
  return _impl_.res_info_.Mutable(GetArenaForAllocation());
}
inline std::string* GetTargetAddrResp::release_res_info() {
  // @@protoc_insertion_point(field_release:GetTargetAddrResp.res_info)
  return _impl_.res_info_.Release();
}
inline void GetTargetAddrResp::set_allocated_res_info(std::string* res_info) {
  if (res_info != nullptr) {
    
  } else {
    
  }
  _impl_.res_info_.SetAllocated(res_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.res_info_.IsDefault()) {
    _impl_.res_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:GetTargetAddrResp.res_info)
}

// repeated string targetServiceIPAndPort = 3;
inline int GetTargetAddrResp::_internal_targetserviceipandport_size() const {
  return _impl_.targetserviceipandport_.size();
}
inline int GetTargetAddrResp::targetserviceipandport_size() const {
  return _internal_targetserviceipandport_size();
}
inline void GetTargetAddrResp::clear_targetserviceipandport() {
  _impl_.targetserviceipandport_.Clear();
}
inline std::string* GetTargetAddrResp::add_targetserviceipandport() {
  std::string* _s = _internal_add_targetserviceipandport();
  // @@protoc_insertion_point(field_add_mutable:GetTargetAddrResp.targetServiceIPAndPort)
  return _s;
}
inline const std::string& GetTargetAddrResp::_internal_targetserviceipandport(int index) const {
  return _impl_.targetserviceipandport_.Get(index);
}
inline const std::string& GetTargetAddrResp::targetserviceipandport(int index) const {
  // @@protoc_insertion_point(field_get:GetTargetAddrResp.targetServiceIPAndPort)
  return _internal_targetserviceipandport(index);
}
inline std::string* GetTargetAddrResp::mutable_targetserviceipandport(int index) {
  // @@protoc_insertion_point(field_mutable:GetTargetAddrResp.targetServiceIPAndPort)
  return _impl_.targetserviceipandport_.Mutable(index);
}
inline void GetTargetAddrResp::set_targetserviceipandport(int index, const std::string& value) {
  _impl_.targetserviceipandport_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:GetTargetAddrResp.targetServiceIPAndPort)
}
inline void GetTargetAddrResp::set_targetserviceipandport(int index, std::string&& value) {
  _impl_.targetserviceipandport_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:GetTargetAddrResp.targetServiceIPAndPort)
}
inline void GetTargetAddrResp::set_targetserviceipandport(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.targetserviceipandport_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:GetTargetAddrResp.targetServiceIPAndPort)
}
inline void GetTargetAddrResp::set_targetserviceipandport(int index, const char* value, size_t size) {
  _impl_.targetserviceipandport_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:GetTargetAddrResp.targetServiceIPAndPort)
}
inline std::string* GetTargetAddrResp::_internal_add_targetserviceipandport() {
  return _impl_.targetserviceipandport_.Add();
}
inline void GetTargetAddrResp::add_targetserviceipandport(const std::string& value) {
  _impl_.targetserviceipandport_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:GetTargetAddrResp.targetServiceIPAndPort)
}
inline void GetTargetAddrResp::add_targetserviceipandport(std::string&& value) {
  _impl_.targetserviceipandport_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:GetTargetAddrResp.targetServiceIPAndPort)
}
inline void GetTargetAddrResp::add_targetserviceipandport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.targetserviceipandport_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:GetTargetAddrResp.targetServiceIPAndPort)
}
inline void GetTargetAddrResp::add_targetserviceipandport(const char* value, size_t size) {
  _impl_.targetserviceipandport_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:GetTargetAddrResp.targetServiceIPAndPort)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTargetAddrResp::targetserviceipandport() const {
  // @@protoc_insertion_point(field_list:GetTargetAddrResp.targetServiceIPAndPort)
  return _impl_.targetserviceipandport_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTargetAddrResp::mutable_targetserviceipandport() {
  // @@protoc_insertion_point(field_mutable_list:GetTargetAddrResp.targetServiceIPAndPort)
  return &_impl_.targetserviceipandport_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_register_5fserver_2eproto
