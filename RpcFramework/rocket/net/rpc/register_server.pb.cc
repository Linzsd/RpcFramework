// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: register_server.proto

#include "register_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RegisterServerReq::RegisterServerReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serviceipandport_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerReqDefaultTypeInternal() {}
  union {
    RegisterServerReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerReqDefaultTypeInternal _RegisterServerReq_default_instance_;
PROTOBUF_CONSTEXPR RegisterServerResp::RegisterServerResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.res_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ret_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterServerRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterServerRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterServerRespDefaultTypeInternal() {}
  union {
    RegisterServerResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterServerRespDefaultTypeInternal _RegisterServerResp_default_instance_;
PROTOBUF_CONSTEXPR GetTargetAddrReq::GetTargetAddrReq(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sourceservicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.targetservicename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTargetAddrReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTargetAddrReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTargetAddrReqDefaultTypeInternal() {}
  union {
    GetTargetAddrReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTargetAddrReqDefaultTypeInternal _GetTargetAddrReq_default_instance_;
PROTOBUF_CONSTEXPR GetTargetAddrResp::GetTargetAddrResp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.targetserviceipandport_)*/{}
  , /*decltype(_impl_.res_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ret_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTargetAddrRespDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTargetAddrRespDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTargetAddrRespDefaultTypeInternal() {}
  union {
    GetTargetAddrResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTargetAddrRespDefaultTypeInternal _GetTargetAddrResp_default_instance_;
static ::_pb::Metadata file_level_metadata_register_5fserver_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_register_5fserver_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_register_5fserver_2eproto[1];

const uint32_t TableStruct_register_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterServerReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterServerReq, _impl_.servicename_),
  PROTOBUF_FIELD_OFFSET(::RegisterServerReq, _impl_.serviceipandport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RegisterServerResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterServerResp, _impl_.ret_code_),
  PROTOBUF_FIELD_OFFSET(::RegisterServerResp, _impl_.res_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetTargetAddrReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetTargetAddrReq, _impl_.sourceservicename_),
  PROTOBUF_FIELD_OFFSET(::GetTargetAddrReq, _impl_.targetservicename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetTargetAddrResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::GetTargetAddrResp, _impl_.ret_code_),
  PROTOBUF_FIELD_OFFSET(::GetTargetAddrResp, _impl_.res_info_),
  PROTOBUF_FIELD_OFFSET(::GetTargetAddrResp, _impl_.targetserviceipandport_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::RegisterServerReq)},
  { 8, -1, -1, sizeof(::RegisterServerResp)},
  { 16, -1, -1, sizeof(::GetTargetAddrReq)},
  { 24, -1, -1, sizeof(::GetTargetAddrResp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RegisterServerReq_default_instance_._instance,
  &::_RegisterServerResp_default_instance_._instance,
  &::_GetTargetAddrReq_default_instance_._instance,
  &::_GetTargetAddrResp_default_instance_._instance,
};

const char descriptor_table_protodef_register_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025register_server.proto\"B\n\021RegisterServe"
  "rReq\022\023\n\013ServiceName\030\001 \001(\t\022\030\n\020ServiceIPAn"
  "dPort\030\002 \001(\t\"8\n\022RegisterServerResp\022\020\n\010ret"
  "_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t\"H\n\020GetTarg"
  "etAddrReq\022\031\n\021sourceServiceName\030\001 \001(\t\022\031\n\021"
  "targetServiceName\030\002 \001(\t\"W\n\021GetTargetAddr"
  "Resp\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010res_info\030\002 \001(\t"
  "\022\036\n\026targetServiceIPAndPort\030\003 \003(\t2}\n\010Regi"
  "ster\0226\n\rgetTargetAddr\022\021.GetTargetAddrReq"
  "\032\022.GetTargetAddrResp\0229\n\016registerServer\022\022"
  ".RegisterServerReq\032\023.RegisterServerRespB"
  "\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_register_5fserver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_register_5fserver_2eproto = {
    false, false, 452, descriptor_table_protodef_register_5fserver_2eproto,
    "register_server.proto",
    &descriptor_table_register_5fserver_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_register_5fserver_2eproto::offsets,
    file_level_metadata_register_5fserver_2eproto, file_level_enum_descriptors_register_5fserver_2eproto,
    file_level_service_descriptors_register_5fserver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_register_5fserver_2eproto_getter() {
  return &descriptor_table_register_5fserver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_register_5fserver_2eproto(&descriptor_table_register_5fserver_2eproto);

// ===================================================================

class RegisterServerReq::_Internal {
 public:
};

RegisterServerReq::RegisterServerReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterServerReq)
}
RegisterServerReq::RegisterServerReq(const RegisterServerReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , decltype(_impl_.serviceipandport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servicename().empty()) {
    _this->_impl_.servicename_.Set(from._internal_servicename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serviceipandport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceipandport_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serviceipandport().empty()) {
    _this->_impl_.serviceipandport_.Set(from._internal_serviceipandport(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RegisterServerReq)
}

inline void RegisterServerReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servicename_){}
    , decltype(_impl_.serviceipandport_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serviceipandport_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serviceipandport_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterServerReq::~RegisterServerReq() {
  // @@protoc_insertion_point(destructor:RegisterServerReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servicename_.Destroy();
  _impl_.serviceipandport_.Destroy();
}

void RegisterServerReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerReq::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterServerReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servicename_.ClearToEmpty();
  _impl_.serviceipandport_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ServiceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_servicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RegisterServerReq.ServiceName"));
        } else
          goto handle_unusual;
        continue;
      // string ServiceIPAndPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serviceipandport();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RegisterServerReq.ServiceIPAndPort"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterServerReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servicename().data(), static_cast<int>(this->_internal_servicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterServerReq.ServiceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_servicename(), target);
  }

  // string ServiceIPAndPort = 2;
  if (!this->_internal_serviceipandport().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serviceipandport().data(), static_cast<int>(this->_internal_serviceipandport().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterServerReq.ServiceIPAndPort");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serviceipandport(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterServerReq)
  return target;
}

size_t RegisterServerReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterServerReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ServiceName = 1;
  if (!this->_internal_servicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servicename());
  }

  // string ServiceIPAndPort = 2;
  if (!this->_internal_serviceipandport().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serviceipandport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerReq::GetClassData() const { return &_class_data_; }


void RegisterServerReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerReq*>(&to_msg);
  auto& from = static_cast<const RegisterServerReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterServerReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servicename().empty()) {
    _this->_internal_set_servicename(from._internal_servicename());
  }
  if (!from._internal_serviceipandport().empty()) {
    _this->_internal_set_serviceipandport(from._internal_serviceipandport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerReq::CopyFrom(const RegisterServerReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterServerReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerReq::IsInitialized() const {
  return true;
}

void RegisterServerReq::InternalSwap(RegisterServerReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servicename_, lhs_arena,
      &other->_impl_.servicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serviceipandport_, lhs_arena,
      &other->_impl_.serviceipandport_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_5fserver_2eproto_getter, &descriptor_table_register_5fserver_2eproto_once,
      file_level_metadata_register_5fserver_2eproto[0]);
}

// ===================================================================

class RegisterServerResp::_Internal {
 public:
};

RegisterServerResp::RegisterServerResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterServerResp)
}
RegisterServerResp::RegisterServerResp(const RegisterServerResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterServerResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.res_info_){}
    , decltype(_impl_.ret_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res_info().empty()) {
    _this->_impl_.res_info_.Set(from._internal_res_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ret_code_ = from._impl_.ret_code_;
  // @@protoc_insertion_point(copy_constructor:RegisterServerResp)
}

inline void RegisterServerResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.res_info_){}
    , decltype(_impl_.ret_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterServerResp::~RegisterServerResp() {
  // @@protoc_insertion_point(destructor:RegisterServerResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterServerResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.res_info_.Destroy();
}

void RegisterServerResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterServerResp::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterServerResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.res_info_.ClearToEmpty();
  _impl_.ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterServerResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RegisterServerResp.res_info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterServerResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterServerResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RegisterServerResp.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterServerResp)
  return target;
}

size_t RegisterServerResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterServerResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterServerResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterServerResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterServerResp::GetClassData() const { return &_class_data_; }


void RegisterServerResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterServerResp*>(&to_msg);
  auto& from = static_cast<const RegisterServerResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterServerResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_res_info().empty()) {
    _this->_internal_set_res_info(from._internal_res_info());
  }
  if (from._internal_ret_code() != 0) {
    _this->_internal_set_ret_code(from._internal_ret_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterServerResp::CopyFrom(const RegisterServerResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterServerResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterServerResp::IsInitialized() const {
  return true;
}

void RegisterServerResp::InternalSwap(RegisterServerResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.res_info_, lhs_arena,
      &other->_impl_.res_info_, rhs_arena
  );
  swap(_impl_.ret_code_, other->_impl_.ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterServerResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_5fserver_2eproto_getter, &descriptor_table_register_5fserver_2eproto_once,
      file_level_metadata_register_5fserver_2eproto[1]);
}

// ===================================================================

class GetTargetAddrReq::_Internal {
 public:
};

GetTargetAddrReq::GetTargetAddrReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetTargetAddrReq)
}
GetTargetAddrReq::GetTargetAddrReq(const GetTargetAddrReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTargetAddrReq* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sourceservicename_){}
    , decltype(_impl_.targetservicename_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.sourceservicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceservicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceservicename().empty()) {
    _this->_impl_.sourceservicename_.Set(from._internal_sourceservicename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.targetservicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetservicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetservicename().empty()) {
    _this->_impl_.targetservicename_.Set(from._internal_targetservicename(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:GetTargetAddrReq)
}

inline void GetTargetAddrReq::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sourceservicename_){}
    , decltype(_impl_.targetservicename_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.sourceservicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sourceservicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.targetservicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.targetservicename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTargetAddrReq::~GetTargetAddrReq() {
  // @@protoc_insertion_point(destructor:GetTargetAddrReq)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTargetAddrReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sourceservicename_.Destroy();
  _impl_.targetservicename_.Destroy();
}

void GetTargetAddrReq::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTargetAddrReq::Clear() {
// @@protoc_insertion_point(message_clear_start:GetTargetAddrReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sourceservicename_.ClearToEmpty();
  _impl_.targetservicename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTargetAddrReq::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sourceServiceName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sourceservicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetTargetAddrReq.sourceServiceName"));
        } else
          goto handle_unusual;
        continue;
      // string targetServiceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_targetservicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetTargetAddrReq.targetServiceName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTargetAddrReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetTargetAddrReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sourceServiceName = 1;
  if (!this->_internal_sourceservicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceservicename().data(), static_cast<int>(this->_internal_sourceservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetTargetAddrReq.sourceServiceName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sourceservicename(), target);
  }

  // string targetServiceName = 2;
  if (!this->_internal_targetservicename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetservicename().data(), static_cast<int>(this->_internal_targetservicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetTargetAddrReq.targetServiceName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_targetservicename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetTargetAddrReq)
  return target;
}

size_t GetTargetAddrReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetTargetAddrReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sourceServiceName = 1;
  if (!this->_internal_sourceservicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceservicename());
  }

  // string targetServiceName = 2;
  if (!this->_internal_targetservicename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetservicename());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTargetAddrReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTargetAddrReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTargetAddrReq::GetClassData() const { return &_class_data_; }


void GetTargetAddrReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTargetAddrReq*>(&to_msg);
  auto& from = static_cast<const GetTargetAddrReq&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetTargetAddrReq)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sourceservicename().empty()) {
    _this->_internal_set_sourceservicename(from._internal_sourceservicename());
  }
  if (!from._internal_targetservicename().empty()) {
    _this->_internal_set_targetservicename(from._internal_targetservicename());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTargetAddrReq::CopyFrom(const GetTargetAddrReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetTargetAddrReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetAddrReq::IsInitialized() const {
  return true;
}

void GetTargetAddrReq::InternalSwap(GetTargetAddrReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sourceservicename_, lhs_arena,
      &other->_impl_.sourceservicename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.targetservicename_, lhs_arena,
      &other->_impl_.targetservicename_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetAddrReq::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_5fserver_2eproto_getter, &descriptor_table_register_5fserver_2eproto_once,
      file_level_metadata_register_5fserver_2eproto[2]);
}

// ===================================================================

class GetTargetAddrResp::_Internal {
 public:
};

GetTargetAddrResp::GetTargetAddrResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:GetTargetAddrResp)
}
GetTargetAddrResp::GetTargetAddrResp(const GetTargetAddrResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTargetAddrResp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.targetserviceipandport_){from._impl_.targetserviceipandport_}
    , decltype(_impl_.res_info_){}
    , decltype(_impl_.ret_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_res_info().empty()) {
    _this->_impl_.res_info_.Set(from._internal_res_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.ret_code_ = from._impl_.ret_code_;
  // @@protoc_insertion_point(copy_constructor:GetTargetAddrResp)
}

inline void GetTargetAddrResp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.targetserviceipandport_){arena}
    , decltype(_impl_.res_info_){}
    , decltype(_impl_.ret_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.res_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.res_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetTargetAddrResp::~GetTargetAddrResp() {
  // @@protoc_insertion_point(destructor:GetTargetAddrResp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTargetAddrResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.targetserviceipandport_.~RepeatedPtrField();
  _impl_.res_info_.Destroy();
}

void GetTargetAddrResp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTargetAddrResp::Clear() {
// @@protoc_insertion_point(message_clear_start:GetTargetAddrResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targetserviceipandport_.Clear();
  _impl_.res_info_.ClearToEmpty();
  _impl_.ret_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTargetAddrResp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string res_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_res_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "GetTargetAddrResp.res_info"));
        } else
          goto handle_unusual;
        continue;
      // repeated string targetServiceIPAndPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targetserviceipandport();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "GetTargetAddrResp.targetServiceIPAndPort"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTargetAddrResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetTargetAddrResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret_code(), target);
  }

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_res_info().data(), static_cast<int>(this->_internal_res_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetTargetAddrResp.res_info");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_res_info(), target);
  }

  // repeated string targetServiceIPAndPort = 3;
  for (int i = 0, n = this->_internal_targetserviceipandport_size(); i < n; i++) {
    const auto& s = this->_internal_targetserviceipandport(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetTargetAddrResp.targetServiceIPAndPort");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetTargetAddrResp)
  return target;
}

size_t GetTargetAddrResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetTargetAddrResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string targetServiceIPAndPort = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.targetserviceipandport_.size());
  for (int i = 0, n = _impl_.targetserviceipandport_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.targetserviceipandport_.Get(i));
  }

  // string res_info = 2;
  if (!this->_internal_res_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_res_info());
  }

  // int32 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ret_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTargetAddrResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTargetAddrResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTargetAddrResp::GetClassData() const { return &_class_data_; }


void GetTargetAddrResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTargetAddrResp*>(&to_msg);
  auto& from = static_cast<const GetTargetAddrResp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetTargetAddrResp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.targetserviceipandport_.MergeFrom(from._impl_.targetserviceipandport_);
  if (!from._internal_res_info().empty()) {
    _this->_internal_set_res_info(from._internal_res_info());
  }
  if (from._internal_ret_code() != 0) {
    _this->_internal_set_ret_code(from._internal_ret_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTargetAddrResp::CopyFrom(const GetTargetAddrResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetTargetAddrResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTargetAddrResp::IsInitialized() const {
  return true;
}

void GetTargetAddrResp::InternalSwap(GetTargetAddrResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targetserviceipandport_.InternalSwap(&other->_impl_.targetserviceipandport_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.res_info_, lhs_arena,
      &other->_impl_.res_info_, rhs_arena
  );
  swap(_impl_.ret_code_, other->_impl_.ret_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTargetAddrResp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_register_5fserver_2eproto_getter, &descriptor_table_register_5fserver_2eproto_once,
      file_level_metadata_register_5fserver_2eproto[3]);
}

// ===================================================================

Register::~Register() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Register::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_register_5fserver_2eproto);
  return file_level_service_descriptors_register_5fserver_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Register::GetDescriptor() {
  return descriptor();
}

void Register::getTargetAddr(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::GetTargetAddrReq*,
                         ::GetTargetAddrResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method getTargetAddr() not implemented.");
  done->Run();
}

void Register::registerServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::RegisterServerReq*,
                         ::RegisterServerResp*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method registerServer() not implemented.");
  done->Run();
}

void Register::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_register_5fserver_2eproto[0]);
  switch(method->index()) {
    case 0:
      getTargetAddr(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::GetTargetAddrReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::GetTargetAddrResp*>(
                 response),
             done);
      break;
    case 1:
      registerServer(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::RegisterServerReq*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::RegisterServerResp*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Register::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GetTargetAddrReq::default_instance();
    case 1:
      return ::RegisterServerReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Register::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::GetTargetAddrResp::default_instance();
    case 1:
      return ::RegisterServerResp::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Register_Stub::Register_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Register_Stub::Register_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Register_Stub::~Register_Stub() {
  if (owns_channel_) delete channel_;
}

void Register_Stub::getTargetAddr(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::GetTargetAddrReq* request,
                              ::GetTargetAddrResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Register_Stub::registerServer(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::RegisterServerReq* request,
                              ::RegisterServerResp* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RegisterServerReq*
Arena::CreateMaybeMessage< ::RegisterServerReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterServerReq >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterServerResp*
Arena::CreateMaybeMessage< ::RegisterServerResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterServerResp >(arena);
}
template<> PROTOBUF_NOINLINE ::GetTargetAddrReq*
Arena::CreateMaybeMessage< ::GetTargetAddrReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetTargetAddrReq >(arena);
}
template<> PROTOBUF_NOINLINE ::GetTargetAddrResp*
Arena::CreateMaybeMessage< ::GetTargetAddrResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::GetTargetAddrResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
